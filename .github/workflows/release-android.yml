
name: Release Frosty on Android

# For now, have the option to run manually just to test things.
on: [workflow_dispatch]

jobs:
  deploy:
    name: Release/deploy the app for iOS and Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
      
      - name: Install bundler
        run: gem install bundler
        
      - name: Install fastlane Android dependencies with bundler
        run: cd android && bundle install
        
      - name: Decode and create upload-keystore.jks
        env:
          UPLOAD_KEYSTORE: ${{ secrets.UPLOAD_KEYSTORE }}
        run: echo "$UPLOAD_KEYSTORE" | base64 --decode > "$GITHUB_WORKSPACE/android/upload-keystore.jks"
          
      - name: Create key.properties
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_FILE_PATH: android/key.properties
        run: |
          echo "storePassword=$STORE_PASSWORD" >> "$KEY_FILE_PATH"
          echo "keyPassword=$KEY_PASSWORD" >> "$KEY_FILE_PATH"
          echo "keyAlias=upload" >> "$KEY_FILE_PATH"
          echo "storeFile=$GITHUB_WORKSPACE/android/upload-keystore.jks" >> "$KEY_FILE_PATH"
      
      - name: Build for Android
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SECRET: ${{ secrets.SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: flutter build appbundle --dart-define CLIENT_ID="$CLIENT_ID" --dart-define SECRET="$SECRET" --dart-define SENTRY_DSN="$SENTRY_DSN"
        
      - name: Deploy with fastlane
        run: cd android && bundle exec fastlane deploy
          
